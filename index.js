(function() {
  var PouchDB, crypto, debug, delay, pkg, replicate, seem, url,
    hasProp = {}.hasOwnProperty;

  seem = require('seem');

  module.exports = replicate = seem(function*(prefix_source, prefix_target, name, extensions_cb) {
    var _rev, auth, comment, doc, id, k, model, replicator, replicator_db, source, sum, target, use_delete, v;
    replicator_db = prefix_target + "/_replicator";
    replicator = new PouchDB(replicator_db, {
      skip_setup: true
    });
    use_delete = true;
    source = url.parse(prefix_source);
    comment = "replication of " + name + " from " + source.host;
    debug("Going to start " + comment + ".");
    model = {
      comment: comment,
      continuous: true,
      target: name,
      source: {
        url: url.format({
          protocol: source.protocol,
          host: source.host,
          pathname: name
        })
      }
    };
    if (source.auth != null) {
      auth = (new Buffer(source.auth)).toString('base64');
      debug("Encoded `" + source.auth + "` of `" + prefix_source + "` as `" + auth + "`.");
      model.source.headers = {
        Authorization: "Basic " + auth
      };
    }
    yield (typeof extensions_cb === "function" ? extensions_cb(model) : void 0);
    sum = crypto.createHash('sha256');
    sum.update(JSON.stringify(model));
    id = sum.digest('hex');
    model.comment_id = id;
    model._id = use_delete ? model.comment : id;
    debug("Going to inject", model);
    target = new PouchDB(prefix_target + "/" + name, {
      skip_setup: false
    });
    yield target.info();
    if (use_delete) {
      _rev = (yield replicator.get(model._id)["catch"](function(error) {
        return {};
      }))._rev;
      if (_rev != null) {
        yield replicator.remove(model._id, _rev);
      }
    }
    yield delay(2000);
    _rev = (yield replicator.get(model._id)["catch"](function(error) {
      return {};
    }))._rev;
    doc = {};
    if (_rev != null) {
      doc._rev = _rev;
    }
    for (k in model) {
      if (!hasProp.call(model, k)) continue;
      v = model[k];
      doc[k] = v;
    }
    debug('Creating replication', doc);
    yield replicator.put(doc)["catch"](function(error) {
      var ref;
      debug("put " + model._id + ": " + ((ref = error.stack) != null ? ref : error));
      if ((error.status != null) && error.status === 403) {
        debug("Replication already started");
        return;
      }
      debug("Replication from " + model.source + " failed.");
      return Promise.reject(error);
    });
    yield delay(2000);
    doc = (yield replicator.get(model._id)["catch"](function(error) {
      return {};
    }));
    return debug('Replication status', doc);
  });

  PouchDB = require('pouchdb-core').plugin(require('pouchdb-adapter-http')).plugin(require('pouchdb-replication'));

  delay = require('timeout-as-promise');

  crypto = require('crypto');

  url = require('url');

  pkg = require('./package.json');

  debug = (require('tangible'))(pkg.name);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/srv/home/stephane/Artisan/Managed/Telecoms/frantic-team/index.coffee.md
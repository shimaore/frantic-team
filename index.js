(function() {
  var PouchDB, crypto, debug, delay, pkg, replicate, seem, sleep, url,
    hasProp = {}.hasOwnProperty;

  seem = require('seem');

  delay = 2000;

  module.exports = replicate = seem(function*(prefix_source, prefix_target, name, extensions_cb) {
    var _rev, auth, comment, doc, id, k, model, replicator, replicator_db, source, sum, target, use_delete, v;
    replicator_db = prefix_target + "/_replicator";
    replicator = new PouchDB(replicator_db, {
      skip_setup: true
    });
    use_delete = true;
    source = url.parse(prefix_source);
    target = url.parse(prefix_target);
    comment = "replication of " + name + " from " + source.host;
    debug("Going to start " + comment + ".");
    model = {
      comment: comment,
      continuous: true,
      target: {
        url: url.format({
          protocol: target.protocol,
          host: target.host,
          pathname: name
        })
      },
      source: {
        url: url.format({
          protocol: source.protocol,
          host: source.host,
          pathname: name
        })
      }
    };
    if (source.auth != null) {
      auth = (new Buffer(source.auth)).toString('base64');
      debug("Encoded `" + source.auth + "` of `" + prefix_source + "` as `" + auth + "`.");
      model.source.headers = {
        Authorization: "Basic " + auth
      };
    }
    if (target.auth != null) {
      auth = (new Buffer(target.auth)).toString('base64');
      debug("Encoded `" + target.auth + "` of `" + prefix_target + "` as `" + auth + "`.");
      model.target.headers = {
        Authorization: "Basic " + auth
      };
    }
    yield (typeof extensions_cb === "function" ? extensions_cb(model) : void 0);
    sum = crypto.createHash('sha256');
    sum.update(JSON.stringify(model));
    id = sum.digest('hex');
    model.comment_id = id;
    model._id = use_delete ? model.comment : id;
    debug("Going to inject", model);
    target = new PouchDB(prefix_target + "/" + name, {
      skip_setup: false
    });
    yield target.info();
    target.close();
    if (use_delete) {
      _rev = (yield replicator.get(model._id)["catch"](function(error) {
        return {};
      }))._rev;
      if (_rev != null) {
        yield replicator.remove(model._id, _rev);
      }
    }
    yield sleep(delay);
    _rev = (yield replicator.get(model._id)["catch"](function(error) {
      return {};
    }))._rev;
    doc = {};
    if (_rev != null) {
      doc._rev = _rev;
    }
    for (k in model) {
      if (!hasProp.call(model, k)) continue;
      v = model[k];
      doc[k] = v;
    }
    debug('Creating replication', doc);
    yield replicator.put(doc)["catch"](function(error) {
      debug.error("put " + model._id, error);
      if ((error.status != null) && error.status === 403) {
        debug("Replication already started");
        return;
      }
      debug.error("Replication from " + model.source + " failed.", error);
      return Promise.reject(error);
    });
    yield sleep(delay);
    doc = (yield replicator.get(model._id)["catch"](function(error) {
      return {};
    }));
    debug('Replication status', doc);
    replicator.close();
  });

  PouchDB = require('ccnq4-pouchdb').plugin(require('pouchdb-replication'));

  sleep = function(timeout) {
    return new Promise(function(resolve) {
      return setTimeout(resolve, timeout);
    });
  };

  crypto = require('crypto');

  url = require('url');

  pkg = require('./package.json');

  debug = (require('tangible'))(pkg.name);

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/srv/home/stephane/Artisan/Managed/Telecoms/frantic-team/index.coffee.md